{"comment": "If we created a new annotation, then refresh the available annotation layers in the\n detail panel.", "code": "if (state.getSelection().getAnnotation().isNotSet()) {\n  refresh(state);\n}", "code_ast": "ifstatement methodinvocation methodinvocation methodinvocation simplename state simplename simplename getselection simplename methodinvocation simplename getannotation simplename methodinvocation simplename isnotset simplename methodinvocation block expressionstatement methodinvocation simplename refresh simplename simplename state simplename methodinvocation expressionstatement block ifstatement", "identifier": "getSelection getAnnotation refresh state isNotSet", "code_type": "IfStatement"}
{"comment": "Try starting and check return.", "code": "tupleOfInterest=getTupleOfInterest(TestSQLHandler.mapParams(\"qt\",\"/stream\",\"action\",\"start\",\"id\",daemonOfInterest),DAEMON_OP);assertTrue(\"Should have been able to start the daemon\",tupleOfInterest.getString(DAEMON_OP).contains(daemonOfInterest + \" started\"));", "code_ast": "expressionstatement assignment simplename tupleofinterest simplename methodinvocation simplename gettupleofinterest simplename methodinvocation simplename testsqlhandler simplename simplename mapparams simplename stringliteral stringliteral stringliteral stringliteral stringliteral stringliteral stringliteral stringliteral stringliteral stringliteral simplename daemonofinterest simplename methodinvocation simplename daemon_op simplename methodinvocation assignment expressionstatement", "identifier": "getTupleOfInterest TestSQLHandler DAEMON_OP tupleOfInterest mapParams daemonOfInterest", "code_type": "ExpressionStatement ExpressionStatement"}
{"comment": "Don't look inside the 'libraries' folders in the sketchbook", "code": "if (folderName.equals(\"libraries\")) {\n  return false;\n}", "code_ast": "ifstatement methodinvocation simplename foldername simplename simplename equals simplename stringliteral stringliteral methodinvocation block returnstatement booleanliteral booleanliteral returnstatement block ifstatement", "identifier": "equals folderName", "code_type": "IfStatement"}
{"comment": "EditLogInputStreams in a RedundantEditLogInputStream must be finalized,\n and can't be pre-transactional.", "code": "EditLogInputStream first=null;for (EditLogInputStream s : streams) {\n  Preconditions.checkArgument(s.getFirstTxId() != HdfsConstants.INVALID_TXID,\"invalid first txid in stream: %s\",s);\n  Preconditions.checkArgument(s.getLastTxId() != HdfsConstants.INVALID_TXID,\"invalid last txid in stream: %s\",s);\n  if (first == null) {\n    first=s;\n  }\n else {\n    Preconditions.checkArgument(s.getFirstTxId() == first.getFirstTxId(),\"All streams in the RedundantEditLogInputStream must have the same \" + \"start transaction ID!  \" + first + \" had start txId \"+ first.getFirstTxId()+ \", but \"+ s+ \" had start txId \"+ s.getFirstTxId());\n  }\n}", "code_ast": "variabledeclarationstatement simpletype simplename editloginputstream simplename simpletype variabledeclarationfragment simplename first simplename nullliteral nullliteral variabledeclarationfragment variabledeclarationstatement", "identifier": "EditLogInputStream first", "code_type": "VariableDeclarationStatement EnhancedForStatement"}
{"comment": "Check by component", "code": "when(spyVersions.getGradleVersion(project)).thenReturn(new GradleVersion(5,0,0));assertTrue(GradleVersions.getInstance().isGradle4OrNewer(project));when(spyVersions.getGradleVersion(project)).thenReturn(new GradleVersion(4,1,0));assertTrue(GradleVersions.getInstance().isGradle4OrNewer(project));when(spyVersions.getGradleVersion(project)).thenReturn(new GradleVersion(4,0,1));assertTrue(GradleVersions.getInstance().isGradle4OrNewer(project));", "code_ast": "expressionstatement methodinvocation methodinvocation simplename when simplename methodinvocation simplename spyversions simplename simplename getgradleversion simplename simplename project simplename methodinvocation methodinvocation simplename thenreturn simplename classinstancecreation simpletype simplename gradleversion simplename simpletype numberliteral numberliteral numberliteral numberliteral numberliteral numberliteral classinstancecreation methodinvocation expressionstatement", "identifier": "getGradleVersion thenReturn spyVersions project GradleVersion when", "code_type": "ExpressionStatement ExpressionStatement ExpressionStatement ExpressionStatement ExpressionStatement ExpressionStatement"}
